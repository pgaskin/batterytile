name: release

on:
  push:
    tags:
      - 'v*'

jobs:
  app:
    name: App
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: gradle
      - run: ./gradlew app:assembleRelease
      - uses: actions/upload-artifact@v3
        with:
          name: app-release
          path: app/build/outputs/apk/release/app-release-unsigned.apk
  release:
    name: Release
    runs-on: ubuntu-latest
    environment: release
    permissions:
      contents: write
    needs:
      - app
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: app-release
      - name: Write keystore
        run: echo "$KEYSTORE_BASE64" | base64 --decode > "$KEYSTORE_PATH"
        env:
          KEYSTORE_PATH: ${{ github.workspace }}/keystore.jks
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
      - name: Sign APK
        run: $ANDROID_HOME/build-tools/33.0.0/apksigner sign --ks "$KEYSTORE_PATH" --ks-pass env:KEYSTORE_PASSWORD --in app-release-unsigned.apk --out app-release.apk
        env:
          KEYSTORE_PATH: ${{ github.workspace }}/keystore.jks
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
      - name: Verify APK signature
        run: $ANDROID_HOME/build-tools/33.0.0/apksigner verify --print-certs app-release.apk
      - name: Create release
        uses: actions/github-script@v6
        id: create-release
        with:
          retries: 3
          result-encoding: string
          script: |
            const release = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: context.ref.split('/').pop(),
              draft: true,
            })
            return release.data.id
      - name: Upload release asset
        uses: actions/github-script@v6
        with:
          retries: 3
          script: |
            await github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ toJSON(steps.create-release.outputs.result) }},
              data: require('fs').readFileSync('app-release.apk'),
              name: 'BatteryTile.apk',
            })
